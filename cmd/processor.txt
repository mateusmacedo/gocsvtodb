package main

import (
	"bufio"
	"context"
	"encoding/csv"
	"fmt"
	"io"
	"net"
	"os"

	"google.golang.org/grpc"

	csvprocessor "pkg/pb/csvprocessor/v1"
)

type server struct {
	csvprocessor.UnimplementedCSVReaderServer
}

func (s *server) ReadHeader(ctx context.Context, req *csvprocessor.HeaderRequest) (*csvprocessor.HeaderResponse, error) {
	header, err := readHeader(req.HeaderFile)
	if err != nil {
		return nil, fmt.Errorf("erro ao ler o cabeçalho: %w", err)
	}

	return &csvprocessor.HeaderResponse{
		Header: header,
	}, nil
}

func (s *server) ReadRecord(req *csvprocessor.RecordRequest, stream csvprocessor.CSVReader_ReadRecordServer) error {
	file, err := os.Open(req.FilePath)
	if err != nil {
		return fmt.Errorf("erro ao abrir o arquivo: %w", err)
	}
	defer file.Close()

	reader := csv.NewReader(bufio.NewReader(file))

	for {
		record, err := reader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("erro ao ler a linha: %w", err)
		}

		if err := stream.Send(&csvprocessor.RecordResponse{
			Record: record,
		}); err != nil {
			return fmt.Errorf("erro ao enviar a resposta: %w", err)
		}
	}

	return nil
}

func readHeader(headerFile string) ([]string, error) {
	file, err := os.Open(headerFile)
	if err != nil {
		return nil, fmt.Errorf("erro ao abrir o arquivo: %w", err)
	}
	defer file.Close()

	reader := csv.NewReader(file)
	header, err := reader.Read()
	if err != nil {
		return nil, fmt.Errorf("erro ao ler o cabeçalho: %w", err)
	}

	return header, nil
}

func main() {
	lis, err := net.Listen("tcp", "localhost:50051")
	if err != nil {
		fmt.Printf("failed to listen: %v\n", err)
		return
	}

	grpcServer := grpc.NewServer()
	csvprocessor.RegisterCSVReaderServer(grpcServer, &server{})

	fmt.Println("CSVReader server running on localhost:50051")
	if err := grpcServer.Serve(lis); err != nil {
		fmt.Printf("failed to serve: %v\n", err)
	}
}
