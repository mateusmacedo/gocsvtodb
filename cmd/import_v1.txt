package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"sync"

	"github.com/go-redis/redis/v8"
	"golang.org/x/sync/errgroup"
)

const (
	filesPath      = "path/to/split/files" // Caminho para os arquivos divididos
	redisKeyPrefix = "csv_import:"
)

func main() {
	rdb := redis.NewClient(&redis.Options{
		Addr:     "localhost:6379",
		Password: "", // Insira a senha do Redis, se necessário
		DB:       0,  // DB número 0
	})

	files, err := ioutil.ReadDir(filesPath)
	if err != nil {
		fmt.Printf("Erro ao ler o diretório de arquivos: %v\n", err)
		return
	}

	var wg sync.WaitGroup
	fileChan := make(chan string)
	workerCount := 4 // Defina o número de workers

	// Inicie os workers
	for i := 0; i < workerCount; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			worker(rdb, fileChan)
		}()
	}

	// Enfileire os arquivos para processamento
	for _, f := range files {
		if !f.IsDir() && strings.HasSuffix(f.Name(), ".csv") {
			filePath := filepath.Join(filesPath, f.Name())
			fileChan <- filePath
		}
	}
	close(fileChan)

	wg.Wait()
	fmt.Println("Importação concluída!")
}

func worker(rdb *redis.Client, fileChan <-chan string) {
	for filePath := range fileChan {
		eg := errgroup.Group{}
		eg.Go(func() error {
			return processFile(rdb, filePath)
		})

		if err := eg.Wait(); err != nil {
			fmt.Printf("Erro ao processar o arquivo %s: %v\n", filePath, err)
			continue
		}
	}
}

func processFile(rdb *redis.Client, filePath string) error {
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("erro ao abrir o arquivo: %w", err)
	}
	defer file.Close()

	fileName := filepath.Base(filePath)
	redisKey := redisKeyPrefix + fileName
	startLine, err := rdb.Get(context.Background(), redisKey).Int()
	if err != nil && err != redis.Nil {
		return fmt.Errorf("erro ao obter posição inicial do Redis: %w", err)
	}

	reader := bufio.NewReader(file)
	for i := 0; i < startLine; i++ {
		_, err := reader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("erro ao buscar a posição inicial: %w", err)
		}
	}

	lineNumber := startLine
	for {
		line, err := reader.ReadString('\n')
		if err != nil {
			if err == io
